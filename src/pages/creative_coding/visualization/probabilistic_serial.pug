extends /components/layout.pug

block title
  title Probabilistic Serial

block append script
  script(type='module').
    import execute from '/static/scripts/creative_coding/visualization/probabilistic_serial/index.js';

    const root = document.getElementById('probabilistic_serial');
    execute().start(
      root.querySelector('#canvas'),
      root.querySelector('#config'),
    );

block content
  h1 Probabilistic Serial
  #probabilistic_serial.preview-container
    .sketch
      canvas#canvas.border.border-primary.rounded.border-opacity-50(width='500', height='500')
    form.data-container#config
      label(for='count') Agent Count:
      input#count(type='number', value='3', min='2', step='1')
      div(hidden data-js-step='1')
        button#shuffle(type='button') Shuffle
        button#calculate(type='button') Calculate
      div(hidden data-js-step='2')
        button#done(type='button') Done
        label(for='time') Progress:
        input#time(type='range', value='0', min='0', max='1', step='1e-16')
      div(hidden data-js-step='3')
        select#item
        br
        button#random(type='button') Randomize
        label(for='seed') Seed:
        input#seed(type='range', value='0', min='0', max='1', step='1e-16')
        br
        button#apply(type='button') Apply
        button#apply-all(type='button') Apply All
        button#reset(type='button') Reset
        details#advanced
          summary Advanced Options
          label(for='sample-bvn')
            details
              summary Number of samples to estimate BvN decomposition:
              | If set to 0, the exact algorithm will be used, could be very slow for large problems.
              | Otherwise, a approximation with greedy BvN will be used.
              br
              | Disclaimer: I don't think that this (the exact algorithm) is implemented correctly.
          input#sample-bvn(type='number', value='100', min='0', step='1')
      label(for='lists') Preferences order:
      div#lists.row
  p.
    A simultaneous eating algorithm (SE) is an algorithm for allocating divisible objects among agents with ordinal preferences.
    If all agents are given the same eating speed, then the SE allocation satisfies SD-envy-freeness. This particular variant of SE is called the Probabilistic Serial rule (PS).
